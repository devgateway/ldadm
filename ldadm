#!/usr/bin/python3
import argparse
import logging
import sys

from commands import UserCommand

log_levels = {
    "CRITICAL": logging.CRITICAL,
    "ERROR": logging.ERROR,
    "WARNING": logging.WARNING,
    "INFO": logging.INFO,
    "DEBUG": logging.DEBUG
}

ap = argparse.ArgumentParser(description = "Manage LDAP accounts")

ap.add_argument("--loglevel",
        dest = "log_level",
        default = "WARNING",
        type = str,
        choices = log_levels.keys(),
        help = "Set logging verbosity")

modes = ap.add_subparsers(title = "Objects to manage")

# User commands

user_parser = modes.add_parser("user",
        help = "User accounts")
user_parser.set_defaults(class_name = "UserCommand")

user = user_parser.add_subparsers(title = "User command")

only_suspended = argparse.ArgumentParser(add_help = False)
only_suspended.add_argument("--suspended",
        action = "store_true",
        help = "Only include suspended users")

p = user.add_parser("list",
        parents = [only_suspended])
p.set_defaults(method_name = "list_users")

search = user.add_parser("search",
        parents = [only_suspended],
        aliases = ["find"])
search.add_argument("filter",
        metavar = "FILTER",
        help = "Search filter")
search.set_defaults(method_name = "search")

# User commands that accept zero or more UIDs

multi_user_parser = argparse.ArgumentParser(add_help = False)
multi_user_parser.add_argument("username",
        metavar = "USERNAME",
        nargs = "*",
        help = "One or more UIDs. If omitted, read from stdin.")

p = user.add_parser("show",
        aliases = ["info"],
        parents = [multi_user_parser],
        help = "Show details for accounts")
p.set_defaults(method_name = "show")

p = user.add_parser("suspend",
        aliases = ["lock", "ban", "disable"],
        parents = [multi_user_parser],
        help = "Make accounts inactive")
p.set_defaults(method_name = "suspend")

p = user.add_parser("restore",
        aliases = ["unlock", "unban", "enable"],
        parents = [multi_user_parser],
        help = "Re-activate accounts")
p.set_defaults(method_name = "restore")

p = user.add_parser("delete",
        aliases = ["remove"],
        parents = [multi_user_parser],
        help = "Irreversibly destroy accounts")
p.set_defaults(method_name = "delete")

# Other user commands

user_add = user.add_parser("add",
        aliases = ["create"],
        help = "Add a new account")
user_add.add_argument("username",
        metavar = "USERNAME",
        nargs = '?',
        help = "Account UID")
user_add.set_defaults(method_name = "add")

user_rename = user.add_parser("rename",
        help = "Change account UID")
user_rename.add_argument("oldname",
        metavar = "OLDNAME",
        help = "Old UID")
user_rename.add_argument("newname",
        metavar = "NEWNAME",
        help = "New UID")
user_rename.set_defaults(method_name = "rename")

# Public key commands

key_parser = user.add_parser("key")
key = key_parser.add_subparsers(title = "Key command")

single_user_parser = argparse.ArgumentParser(add_help = False)
single_user_parser.add_argument("username",
        metavar = "USERNAME",
        help = "User ID")

key_from_file = argparse.ArgumentParser(add_help = False)
key_from_file.add_argument("-f", "--file",
        dest = "keyfile",
        metavar = "KEYFILE",
        type = argparse.FileType('r'),
        nargs = 1,
        help = "Read public key from file")

p = key.add_parser("list",
        aliases = ["show"],
        parents = [single_user_parser],
        help = "List public keys for a user")
p.set_defaults(method_name = "list_keys")

p = key.add_parser("add",
        aliases = ["create"],
        parents = [single_user_parser, key_from_file],
        help = "Add a public key to a user")
p.set_defaults(method_name = "add_key")

p = key.add_parser("delete",
        aliases = ["remove"],
        parents = [single_user_parser, key_from_file],
        help = "Remove a public key from a user")
p.set_defaults(method_name = "delete_key")

# List commands

list_parser = modes.add_parser("list",
        help = "Mailing lists")
list_parser.set_defaults(class_name = "ListCommand")

args = ap.parse_args()

logging.basicConfig(level = log_levels[args.log_level])

logging.debug("Invoking %s.%s" % (args.class_name, args.method_name))

try:
    command_instance = globals()[args.class_name](args)
    ldadm = getattr(command_instance, args.method_name)
    ldadm()
except Exception as e:
    sys.exit(str(e))
